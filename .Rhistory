stratovergen <- all_results %>% group_by(rnd_seed,gen,directory, is_selection, male_dist) %>% summarise(mate_var=mean(probability_maraud))
pl <- ggplot(data = stratovergen) + aes(x = gen, y = mate_var, color = as.factor(is_selection), group=interaction(rnd_seed,is_selection)) + geom_line( alpha=.2)
pl
View(stratovergen)
View(stratovergen)
pl <- ggplot(data = filter(stratovergen, male_dist==300)) + aes(x = gen, y = avg_strat, color = as.factor(is_selection), group=interaction(rnd_seed,is_selection)) + geom_line( alpha=.2)
pl
mvovergen <- all_results %>% group_by(rnd_seed,gen,directory, is_selection, male_dist) %>% summarise(mate_var=var(successful_mating))
stratovergen <- all_results %>% group_by(rnd_seed,gen,directory, is_selection, male_dist) %>% summarise(avg_strat=mean(probability_maraud))
pl <- ggplot(data = filter(stratovergen, male_dist==300)) + aes(x = gen, y = avg_strat, color = as.factor(is_selection), group=interaction(rnd_seed,is_selection)) + geom_line( alpha=.2)
pl
model1 <- glm(avg_strat ~ gen + is_selection,
data = filter(stratovergen, male_dist==300),
family = "binomial")
library(tidyverse)
files <- list.files("../to_run/incomplete_results/")
conditions <- str_remove(str_remove(files[str_detect(files, "res_00_")],  "res_.._"), ".csv")
lookup_table <- data.frame()
for (my_condition in conditions){
# split the string
my_split <- strsplit(my_condition, "_")[[1]] #|\\=
# extract parameters
change_what <- my_split[1]
pos_interval <- NA
strat_interval <- NA
assign(paste0(change_what, "_interval"), as.numeric(my_split[2]))
is_scaled <- my_split[3]
init_strat <- my_split[4]
init_pos <- my_split[5]
male_dist <- as.numeric(my_split[6])
num_males <- as.numeric(my_split[7])
lookup_table <- rbind(lookup_table,
data.frame(directory=my_condition,
change_what=change_what,
pos_interval=pos_interval,
strat_interval=strat_interval,
is_scaled=is_scaled,
init_strat=init_strat,
init_pos=init_pos,
male_dist=male_dist,
num_males=num_males))
}
all_results <- tibble()
my_dir_results <- "../to_run/incomplete_results/"
my_results <- list.files("../to_run/incomplete_results/")
count=1
for (my_file in my_results) {
my_condition <- str_remove(str_remove(str_remove(my_file, "null_.._"), "res_.._"), ".csv")
my_rnd_seed <- as.numeric(strsplit(my_file, "_")[[1]][2])
tmp <- read_csv(paste0(my_dir_results, my_file), col_types = cols()) %>% add_column(rnd_seed = my_rnd_seed, directory = my_condition, is_selection=(count>30))
all_results <- rbind(all_results, tmp)
count <-count+1
}
all_results <- all_results %>% inner_join(lookup_table)
all_results <- all_results %>% filter(gen<750) #different lengths, so we're putting them all at the same length
mvovergen <- all_results %>% group_by(rnd_seed,gen,directory, is_selection, male_dist) %>% summarise(mate_var=var(successful_mating))
stratovergen <- all_results %>% group_by(rnd_seed,gen,directory, is_selection, male_dist) %>% summarise(avg_strat=mean(probability_maraud))
pl <- ggplot(data = filter(stratovergen, male_dist==300)) + aes(x = gen, y = avg_strat, color = as.factor(is_selection), group=interaction(rnd_seed,is_selection)) + geom_line( alpha=.2)
pl
model1 <- glm(avg_strat ~ gen + is_selection,
data = filter(stratovergen, male_dist==300),
family = "binomial")
model1 <- glm(avg_strat ~ gen + is_selection,
data = filter(stratovergen, male_dist==300),
family = "binomial")
summary(model1)
X <- rnorm(100)
beta_0 <- 0.35
beta_1 <- -3.2
linear_predictor <- beta_0 + beta_1 * X
predicted_pi_i <- exp(linear_predictor) / (1 + exp(linear_predictor))
ggplot(data = tibble(linear_predictor = linear_predictor, probability = predicted_pi_i)) +
aes(x = linear_predictor, y = probability) +
geom_point() + geom_line()
pl <- ggplot(data = filter(stratovergen, male_dist==300)) + aes(x = gen, y = avg_strat, color = as.factor(is_selection), group=interaction(rnd_seed,is_selection)) + geom_line( alpha=.2) + stat_smooth(method = "glm", method.args=list(family="binomial"))
pl
pl <- ggplot(data = filter(stratovergen, male_dist==300)) + aes(x = gen, y = avg_strat, color = as.factor(is_selection), group=interaction(rnd_seed,is_selection)) + geom_line( alpha=.2)
pl
pl <- ggplot(data = filter(stratovergen, male_dist==300)) + aes(x = gen, y = avg_strat, color = as.factor(is_selection)) + geom_line( alpha=.2) + stat_smooth(method = "glm", method.args=list(family="binomial"))
pl
pl <- ggplot(data = filter(stratovergen, male_dist==300)) + aes(x = gen, y = avg_strat, color = as.factor(is_selection))  + stat_smooth(method = "glm", method.args=list(family="binomial"))
pl
View(stratovergen)
pl <- ggplot(data = stratovergen %>% filter(gen<100 & male_dist==300)) + aes(x = gen, y = avg_strat, color = as.factor(is_selection))  + stat_smooth(method = "glm", method.args=list(family="binomial"))
pl
pl <- ggplot(data = stratovergen %>% filter(gen<300 & male_dist==300)) + aes(x = gen, y = avg_strat, color = as.factor(is_selection))  + stat_smooth(method = "glm", method.args=list(family="binomial"))
pl
pl <- ggplot(data = stratovergen %>% filter(gen<300 & male_dist==300)) + aes(x = gen, y = avg_strat, color = as.factor(is_selection))  + stat_smooth(method = "glm", method.args=list(family="binomial"))
pl
pl <- ggplot(data = stratovergen %>% filter(gen<100 & male_dist==300)) + aes(x = gen, y = avg_strat, color = as.factor(is_selection))  + stat_smooth(method = "glm", method.args=list(family="binomial"))
pl
pl <- ggplot(data = stratovergen %>% filter(gen<200 & male_dist==300)) + aes(x = gen, y = avg_strat, color = as.factor(is_selection))  + stat_smooth(method = "glm", method.args=list(family="binomial"))
pl
pl <- ggplot(data = stratovergen %>% filter(male_dist==300)) + aes(x = gen, y = avg_strat, color = as.factor(is_selection))  + stat_smooth(method = "glm", method.args=list(family="binomial"))
pl
pl <- ggplot(data = stratovergen) + aes(x = gen, y = avg_strat, color = as.factor(is_selection))  + stat_smooth(method = "glm", method.args=list(family="binomial"))
pl
pl <- ggplot(data = stratovergen %>% filter(male_dist==300)) + aes(x = gen, y = avg_strat, color = as.factor(is_selection))  + stat_smooth(method = "glm", method.args=list(family="binomial"))
pl
pl <- ggplot(data = stratovergen) + aes(x = gen, y = avg_strat, color = as.factor(is_selection)) + geom_line() + facet_wrap(~male_dist)
pl
model1 <- glm(avg_strat ~ gen + is_selection + male_dist,
data = stratovergen,
family = "binomial")
summary(model1)
model1 <- glm(avg_strat ~ gen*is_selection*male_dist,
data = stratovergen,
family = "binomial")
summary(model1)
pl <- ggplot(data = stratovergen) + aes(x = gen, y = avg_strat, color = as.factor(is_selection)) + stat_smooth(method = "glm", method.args=list(avg_strat ~ gen*is_selection*male_dist, data = stratovergen,family = "binomial")) + facet_wrap(~male_dist)
pl
pl <- ggplot(data = stratovergen) + aes(x = gen, y = avg_strat, color = as.factor(is_selection)) + stat_smooth(method = "glm", method.args=list(avg_strat ~ gen*is_selection*male_dist, family = "binomial")) + facet_wrap(~male_dist)
pl
pl <- ggplot(data = stratovergen) + aes(x = gen, y = avg_strat, color = as.factor(is_selection)) + stat_smooth(method = "glm", method.args=list(formula=avg_strat ~ gen*is_selection*male_dist, family = "binomial")) + facet_wrap(~male_dist)
pl
pl <- ggplot(data = stratovergen) + aes(x = gen, y = avg_strat, color = as.factor(is_selection)) + stat_smooth(method = "glm", method.args=list(formula=avg_strat ~ gen*is_selection*male_dist, data = stratovergen, family = "binomial")) + facet_wrap(~male_dist)
pl
pl <- ggplot(data = stratovergen) + aes(x = gen, y = avg_strat, color = as.factor(is_selection)) + stat_smooth(method = "glm", method.args=list(formula=avg_strat ~ gen*is_selection*male_dist, family = "binomial")) + facet_wrap(~male_dist)
pl
pl <- ggplot(data = stratovergen) + aes(x = gen, y = avg_strat, color = as.factor(is_selection)) + stat_smooth(method = "glm", method.args=list(formula=y ~ x*is_selection*male_dist, family = "binomial")) + facet_wrap(~male_dist)
pl
pl <- ggplot(data = stratovergen) + aes(x = gen, y = avg_strat, color = as.factor(is_selection)) + facet_wrap(~male_dist) + stat_smooth(method = "glm", method.args=list(formula=y ~ x*color*male_dist, family = "binomial"))
pl
pl <- ggplot(data = stratovergen) + aes(x = gen, y = avg_strat, color = as.factor(is_selection)) + facet_wrap(~male_dist) + stat_smooth(method = "glm", method.args=list(formula=y ~ x*stratovergen$is_selection*stratovergen$male_dist, family = "binomial"))
pl
pl <- ggplot(data = stratovergen) + aes(x = gen, y = avg_strat, color = as.factor(is_selection))  + stat_smooth(method = "glm", method.args=list(formula=y ~ x*stratovergen$is_selection*stratovergen$male_dist, family = "binomial")) + facet_wrap(~male_dist)
pl
pl <- ggplot(data = stratovergen) + aes(x = gen, y = avg_strat, color = as.factor(is_selection))  + stat_smooth(data=stratovergen, method = "glm", method.args=list(formula=y ~ x*is_selection*male_dist, family = "binomial")) + facet_wrap(~male_dist)
pl
X <- rnorm(100)
beta_0 <- 0.35
beta_1 <- -5
linear_predictor <- beta_0 + beta_1 * X
predicted_pi_i <- exp(linear_predictor) / (1 + exp(linear_predictor))
ggplot(data = tibble(linear_predictor = linear_predictor, probability = predicted_pi_i)) +
aes(x = linear_predictor, y = probability) +
geom_point() + geom_line()
X <- rnorm(100)
beta_0 <- 0.35
beta_1 <- -10
linear_predictor <- beta_0 + beta_1 * X
predicted_pi_i <- exp(linear_predictor) / (1 + exp(linear_predictor))
ggplot(data = tibble(linear_predictor = linear_predictor, probability = predicted_pi_i)) +
aes(x = linear_predictor, y = probability) +
geom_point() + geom_line()
X <- rnorm(100)
beta_0 <- 0
beta_1 <- -3.2
linear_predictor <- beta_0 + beta_1 * X
predicted_pi_i <- exp(linear_predictor) / (1 + exp(linear_predictor))
ggplot(data = tibble(linear_predictor = linear_predictor, probability = predicted_pi_i)) +
aes(x = linear_predictor, y = probability) +
geom_point() + geom_line()
X <- rnorm(100)
beta_0 <- 0.35
beta_1 <- -3.2
linear_predictor <- beta_0 + beta_1 * X
predicted_pi_i <- exp(linear_predictor) / (.5 + exp(linear_predictor))
ggplot(data = tibble(linear_predictor = linear_predictor, probability = predicted_pi_i)) +
aes(x = linear_predictor, y = probability) +
geom_point() + geom_line()
X <- rnorm(100)
beta_0 <- 0.35
beta_1 <- -3.2
linear_predictor <- beta_0 + beta_1 * X
predicted_pi_i <- exp(linear_predictor) / (1 + exp(linear_predictor))
ggplot(data = tibble(linear_predictor = linear_predictor, probability = predicted_pi_i)) +
aes(x = linear_predictor, y = probability) +
geom_point() + geom_line()
X <- rnorm(100)
beta_0 <- 0.35
beta_1 <- -3.2
linear_predictor <- beta_0 + beta_1 * X
predicted_pi_i <- .5*exp(linear_predictor) / (1 + exp(linear_predictor))
ggplot(data = tibble(linear_predictor = linear_predictor, probability = predicted_pi_i)) +
aes(x = linear_predictor, y = probability) +
geom_point() + geom_line()
pl <- ggplot(data = tibble(linear_predictor, predicted_pi_i)) + aes(x = linear_predictor, y = predicted_pi_i)  + stat_smooth(method = "glm", method.args=list(family="binomial"))
pl
pl <- ggplot(data = tibble(linear_predictor, predicted_pi_i)) + aes(x = linear_predictor, y = predicted_pi_i)  + stat_smooth()
pl
pl <- ggplot(data = stratovergen %>% filter(male_dist==300)) + aes(x = gen, y = avg_strat, color = as.factor(is_selection))  + stat_smooth()
pl
pl <- ggplot(data = stratovergen) + aes(x = gen, y = avg_strat, color = as.factor(is_selection))  + stat_smooth() + facet_wrap(~male_dist)
pl
sog300 <- stratovergen %>% filter(male_dist==300)
SS<-getInitial(avg_strat~SSlogis(gen,alpha,xmid,scale),data=sog300)
sog300 <- stratovergen %>% filter(male_dist==300)
SS<-getInitial(avg_strat~SSlogis(gen,alpha,xmid,scale),data=sog300)
K_start<-SS["alpha"]
R_start<-1/SS["scale"]
N0_start<-SS["alpha"]/(exp(SS["xmid"]/SS["scale"])+1)
sog300 <- stratovergen %>% filter(male_dist==300)
SS<-getInitial(avg_strat~SSlogis(gen,alpha,log(alpha/.1-1)*scale,scale),data=sog300)
K_start<-SS["alpha"]
R_start<-1/SS["scale"]
#N0_start<-SS["alpha"]/(exp(SS["xmid"]/SS["scale"])+1)
#the formula for the models
lF<-formula(avg_strat~K*n0*exp(r*gen)/(K+n0*(exp(r*Time)-1)) | is_selection)
#fit the model
(m <- nlsList(lF,data=sog300,start=list(K=K_start,n0=N0_start,r=R_start)))
library(deSolve)
#the formula for the models
lF<-formula(avg_strat~K*n0*exp(r*gen)/(K+n0*(exp(r*Time)-1)) | is_selection)
#fit the model
(m <- nlsList(lF,data=sog300,start=list(K=K_start,n0=N0_start,r=R_start)))
library(nlme)
#the formula for the models
lF<-formula(avg_strat~K*n0*exp(r*gen)/(K+n0*(exp(r*Time)-1)) | is_selection)
#fit the model
(m <- nlsList(lF,data=sog300,start=list(K=K_start,n0=N0_start,r=R_start)))
View(sog300)
library(nlme)
#the formula for the models
lF<-formula(avg_strat~K*n0*exp(r*gen)/(K+n0*(exp(r*Time)-1)) | is_selection)
#fit the model
(m <- nlsList(lF,data=sog300,start=list(K=K_start,n0=N0_start,r=R_start, avg_strat=.01, gen=0)))
library(nlme)
#the formula for the models
lF<-formula(avg_strat~K*n0*exp(r*gen)/(K+n0*(exp(r*gen)-1)) | is_selection)
#fit the model
(m <- nlsList(lF,data=sog300,start=list(K=K_start,n0=N0_start,r=R_start, avg_strat=.01, gen=0)))
library(nlme)
#the formula for the models
lF<-formula(avg_strat~K*n0*exp(r*gen)/(K+n0*(exp(r*gen)-1)) | is_selection)
#fit the model
(m <- nlsList(lF,data=sog300,start=list(K=K_start,n0=N0_start,r=R_start, avg_strat=.01, gen=0)))
library(nlme)
#the formula for the models
lF<-formula(avg_strat~K*n0*exp(r*gen)/(K+n0*(exp(r*gen)-1)) | is_selection)
#fit the model
(m <- nlsList(lF,data=sog300,start=list(K=K_start,n0=N0_start,r=R_start)))
library(nlme)
#the formula for the models
lF<-formula(avg_strat~K*.01*exp(r*gen)/(K+.01*(exp(r*gen)-1)) | is_selection)
#fit the model
(m <- nlsList(lF,data=sog300,start=list(K=K_start,n0=N0_start,r=R_start)))
library(nlme)
#the formula for the models
lF<-formula(avg_strat~K*.01*exp(r*gen)/(K+.01*(exp(r*gen)-1)) | is_selection)
#fit the model
(m <- nlsList(lF,data=sog300,start=list(K=K_start,r=R_start)))
sog300 <- stratovergen %>% filter(male_dist==300, rnd_seed%%2)
SS<-getInitial(avg_strat~SSlogis(gen,alpha,log(alpha/.1-1)*scale,scale),data=sog300)
K_start<-SS["alpha"]
R_start<-1/SS["scale"]
N0_start<- .01
library(nlme)
#the formula for the models
lF<-formula(avg_strat~K*.01*exp(r*gen)/(K+.01*(exp(r*gen)-1)) | is_selection)
#fit the model
(m <- nlsList(lF,data=sog300,start=list(K=K_start,r=R_start)))
sog300 <- stratovergen %>% filter(male_dist==300, rnd_seed==0:8)
sog300 <- stratovergen %>% filter(male_dist==300, rnd_seed>=0, rnd_seed<=8)
SS<-getInitial(avg_strat~SSlogis(gen,alpha,log(alpha/.1-1)*scale,scale),data=sog300)
K_start<-SS["alpha"]
R_start<-1/SS["scale"]
N0_start<- .01
library(nlme)
#the formula for the models
lF<-formula(avg_strat~K*.01*exp(r*gen)/(K+.01*(exp(r*gen)-1)) | is_selection)
#fit the model
(m <- nlsList(lF,data=sog300,start=list(K=K_start,r=R_start)))
View(m)
model <- lm(mate_var ~ is_selection*male_dist,
data = mvovergen %>% filter(gen==749))
summary(model)
model <- lm(avg_strat ~ is_selection*male_dist,
data = stratovergen %>% filter(gen==749))
summary(model)
library(tidyverse)
conditions <- list.files("../to_store/")[1:2]
lookup_table <- data.frame()
for (my_condition in conditions){
# split the string
my_split <- strsplit(my_condition, "_")[[1]] #|\\=
# extract parameters
change_what <- my_split[1]
pos_interval <- NA
strat_interval <- NA
assign(paste0(change_what, "_interval"), as.numeric(my_split[2]))
is_scaled <- my_split[3]
init_strat <- my_split[4]
init_pos <- my_split[5]
male_dist <- as.numeric(my_split[6])
num_males <- as.numeric(my_split[7])
lookup_table <- rbind(lookup_table,
data.frame(directory=my_condition,
change_what=change_what,
pos_interval=pos_interval,
strat_interval=strat_interval,
is_scaled=is_scaled,
init_strat=init_strat,
init_pos=init_pos,
male_dist=male_dist,
num_males=num_males))
}
all_results <- tibble()
for (my_condition in conditions){
# read and load each result
my_dir_results <- paste0("../to_store/", my_condition, "/results/")
my_results <- list.files(my_dir_results)
if (length(my_results) > 0){
# process a single file
for (my_file in my_results) {
my_rnd_seed <- as.numeric(strsplit(my_file, "_")[[1]][2])
tmp <- read_csv(paste0(my_dir_results, my_file), col_types = cols()) %>% add_column(rnd_seed = my_rnd_seed, directory = my_condition, is_selection=1)
all_results <- rbind(all_results, tmp)
}
}
}
for (my_condition in conditions){
# read and load each result
my_dir_nulls <- paste0("../to_store/", my_condition, "/nulls/")
my_nulls <- list.files(my_dir_nulls)
if (length(my_nulls) > 0){
# process a single file
for (my_file in my_nulls) {
my_rnd_seed <- as.numeric(strsplit(my_file, "_")[[1]][2])
tmp <- read_csv(paste0(my_dir_nulls, my_file), col_types = cols()) %>% add_column(rnd_seed = my_rnd_seed, directory = my_condition, is_selection=0)
all_results <- rbind(all_results, tmp)
}
}
}
all_results <- all_results %>% inner_join(lookup_table)
wrap <- function(vec, interval){
return(c(vec[(length(vec)+1-interval):length(vec)],
lag(vec, interval)[-(1:interval)]))
}
posvarovergen <- all_results %>% group_by(rnd_seed,gen,directory, is_selection, is_scaled) %>%
mutate(distfrom0=abs(position-wrap(position,1))) %>%
mutate(distfrom1=abs(position-wrap(position,2))) %>%
mutate(distfrom2=abs(position-wrap(position,3))) %>%
mutate(distfrom3=abs(position-wrap(position,4))) %>%
mutate(distfrom4=abs(position-wrap(position,5))) %>% summarise(var=var(c(distfrom0,distfrom1,distfrom2,distfrom3, distfrom4)))
#we don't divide by the mean here bc it (male_dist) doesn't vary
#not what we're currently doing!
modpos <- lm(var ~ is_selection+is_scaled,
data = filter(posvarovergen, gen==1999))
summary(modpos)
#so it's not driving dispersion (hmmmm)
modpos <- lm(var ~ is_selection+is_scaled,
data = filter(posvarovergen, gen==749))
summary(modpos)
#so it's not driving dispersion (hmmmm)
pl <- ggplot(data = posvarovergen) + aes(x = gen, y = var, color = as.factor(is_selection), group=interaction(rnd_seed,is_selection)) + geom_line( alpha=.2) + facet_wrap(~is_scaled)
pl
pl <- ggplot(data = posvarovergen) + aes(x = gen, y = var, color = as.factor(is_selection)) + geom_line( alpha=.2)+ stat_smooth() + facet_wrap(~is_scaled)
pl
View(all_results)
library(tidyverse)
conditions <- list.files("../to_store/")[3:14]
#list.files("../to_run/incomplete_results/")
lookup_table <- data.frame()
for (my_condition in conditions){
# split the string
my_split <- strsplit(my_condition, "_")[[1]] #|\\=
# extract parameters
change_what <- my_split[1]
pos_interval <- NA
strat_interval <- NA
assign(paste0(change_what, "_interval"), as.numeric(my_split[2]))
is_scaled <- my_split[3]
init_strat <- my_split[4]
init_pos <- my_split[5]
male_dist <- as.numeric(my_split[6])
num_males <- as.numeric(my_split[7])
lookup_table <- rbind(lookup_table,
data.frame(directory=my_condition,
change_what=change_what,
pos_interval=pos_interval,
strat_interval=strat_interval,
is_scaled=is_scaled,
init_strat=init_strat,
init_pos=init_pos,
male_dist=male_dist,
num_males=num_males))
}
all_results <- tibble()
my_dir_results <- "../to_run/29_res/"
my_results <- list.files("../to_run/29_res/")
count=1
for (my_file in my_results) {
my_condition <- str_remove(str_remove(str_remove(my_file, "null_.._"), "res_.._"), ".csv")
my_rnd_seed <- as.numeric(strsplit(my_file, "_")[[1]][2])
tmp <- read_csv(paste0(my_dir_results, my_file), col_types = cols()) %>% add_column(rnd_seed = my_rnd_seed, directory = my_condition, is_selection=(count>120))
all_results <- rbind(all_results, tmp)
count <-count+1
}
all_results <- all_results %>% inner_join(lookup_table)
#all_results2 <- all_results %>% filter(gen<750) #different lengths, so we're putting them all at the same length
mvovergen <- all_results %>% filter(num_males==6) %>% group_by(rnd_seed,gen,directory, is_selection, is_scaled, male_dist) %>% summarise(mate_var=var(successful_mating))
mod <- lm(mate_var ~ is_selection*is_scaled*male_dist,
data = filter(mvovergen, gen==1999))
summary(mod)
model5 <- glm(avg_strat ~ is_selection*male_dist*is_scaled*num_males,
data = filter(stratovergen, gen==1999),
family = "gaussian")
stratovergen <- all_results %>%
group_by(gen, is_selection, male_dist, is_scaled, rnd_seed, num_males) %>%
summarise(avg_strat=mean(probability_maraud)) %>%
ungroup() %>%
group_by(is_selection, male_dist, is_scaled, rnd_seed, num_males) %>%
mutate(d_avg_strat=avg_strat-lag(avg_strat)) %>% mutate(l_avg_strat=lag(avg_strat)) %>%
ungroup()
#not doing this rn!
model5 <- glm(avg_strat ~ is_selection*male_dist*is_scaled,
data = stratovergen %>% filter(gen==1999 & num_males==6),
family = "gaussian")
summary(model5)
#different results when you use + vs *!!!!!
#removing male_dist lowers AIC (slightly)
#don't get AIC.... hmmm
model5 <- glm(avg_strat ~ is_selection+male_dist+is_scaled,
data = stratovergen %>% filter(gen==1999 & num_males==6),
family = "gaussian")
summary(model5)
#different results when you use + vs *!!!!!
#removing male_dist lowers AIC (slightly)
#don't get AIC.... hmmm
View(all_results)
model5 <- glm(avg_strat ~ is_selection+male_dist+is_scaled,
data = stratovergen %>% filter(gen==750 & num_males==6),
family = "gaussian")
summary(model5)
#different results when you use + vs *!!!!!
#removing male_dist lowers AIC (slightly)
#don't get AIC.... hmmm
model5 <- glm(avg_strat ~ is_selection+male_dist+is_scaled,
data = stratovergen %>% filter(gen==1999 & num_males==6),
family = "gaussian")
summary(model5)
#different results when you use + vs *!!!!!
#removing male_dist lowers AIC (slightly)
#don't get AIC.... hmmm
knitr::opts_chunk$set(echo = TRUE)
#We're filling this in with 5 random numbers one at a time.
len <- 5
v <- rep(NA, len) #here's the preallocated vector
for(i in 1:len){
v[i] <- runif()
}
#We're filling this in with 5 random numbers one at a time.
len <- 5
v <- rep(NA, len) #here's the preallocated vector
for(i in 1:len){
v[i] <- runif(1)
}
my_length <- 5
v <- rep(NA, my_length)
print(v)
val <- 10 #really arbitrary example
v[3] <- val
print(v)
other_val <- 2 #really arbitrary example
v[5] <- other_val
print(v)
new_v <- rep(NA, 3) #preallocate a vector of length 3
print(new_v)
new_v[1] <- runif(1) #fill in index 1 with a random value between 0 and 1
print(new_v)
new_v[2] <- runif(1) #fill in index 2...
print(new_v)
new_v[3] <- runif(1)
print(new_v)
#aaaaa
vector_of_values_of_i <- 1:4 #this is same as c(1,2,3,4)
for(i in vector_of_values){
print(i)
}
my_length <- 5
v <- rep(NA, my_length)
print(v)
val <- 10 #really arbitrary example
v[3] <- val
print(v)
other_val <- 2 #really arbitrary example
v[5] <- other_val
print(v)
new_v <- rep(NA, 3) #preallocate a vector of length 3
print(new_v)
new_v[1] <- runif(1) #fill in index 1 with a random value between 0 and 1
print(new_v)
new_v[2] <- runif(1) #fill in index 2...
print(new_v)
new_v[3] <- runif(1)
print(new_v)
#aaaaa
vector_of_values_of_i <- 1:4 #this is same as c(1,2,3,4)
for(i in vector_of_values_of_i){
print(i)
}
newest_v <- rep(NA, 3) #preallocate
print(newest_v) #after intiailization
for(i in 1:3){
newest_v[i] <- runif(1)
print(newest_v) #after each step in the for loop
}
newest_v <- rep(NA, 50) #preallocate
for(i in 1:50){
newest_v[i] <- runif(1)
}
print(newest_v)
sample(1:12, 20, replace=TRUE)
v <- rep(NA,1000)
for(i in 1:1000){
v[i] <- mean(sample(1:12, 20, replace=TRUE))
}
setwd("~/webtest")
install.packages("rmarkdown")
source('~/webtest/pgs.R', echo=TRUE)
source('~/webtest/pgs.R', echo=TRUE)
